/*
 * Old classic cutil_math customized for the type Real, which can be
 * float or double
 * Generated by Arman Pazouki
 * Copyright 1993-2010 NVIDIA Corporation.  All rights reserved.
 *
 * Please refer to the NVIDIA end user license agreement (EULA) associated
 * with this source code for terms and conditions that govern your use of
 * this software. Any use, reproduction, disclosure, or distribution of
 * this software and related documentation outside the terms of the EULA
 * is strictly prohibited.
 *
 */

#ifndef CUSTOM_CUTIL_MATH_H
#define CUSTOM_CUTIL_MATH_H
////////Define Real, either float or double
#include <helper_math.h>
#define DOUBLEPRECISION 1

#if DOUBLEPRECISION
typedef double Real;
#else
typedef float Real;
#endif

struct Real2 {
	Real x;
	Real y;
};
struct Real3 {
	Real x;
	Real y;
	Real z;
};
struct Real4 {
	Real x;
	Real y;
	Real z;
	Real w;
};

__host__ __device__ inline Real rminr(Real a, Real b)
{
  return a < b ? a : b;
}

__host__ __device__ inline Real rmaxr(Real a, Real b)
{
  return a > b ? a : b;
}

__host__ __device__ inline Real rsqrtr(Real x)
{
    return 1.0 / sqrt(x);
}

__host__ __device__ inline Real2 make_Real2(Real b, Real c) ///
{
	Real2 a;
	a.x = b;
	a.y = c;
	return a;
}
__host__ __device__ inline Real2 make_Real2(Real s)
{
    return make_Real2(s, s);
}
__host__ __device__ inline Real2 make_Real2(Real3 a)
{
    return make_Real2(a.x, a.y);
}
__host__ __device__ inline Real2 make_Real2(int2 a)
{
    return make_Real2(Real(a.x), Real(a.y));
}
__host__ __device__ inline Real2 make_Real2(uint2 a)
{
    return make_Real2(Real(a.x), Real(a.y));
}

__host__ __device__ inline int2 make_int2(Real2 a)
{
    return make_int2(int(a.x), int(a.y));
}

__host__ __device__ inline Real3 make_Real3(Real a, Real b, Real c) ///
{
	Real3 d;
	d.x = a;
	d.y = b;
	d.z = c;
	return d;
}
__host__ __device__ inline Real3 make_Real3(Real s)
{
    return make_Real3(s, s, s);
}
__host__ __device__ inline Real3 make_Real3(Real2 a)
{
    return make_Real3(a.x, a.y, 0.0);
}
__host__ __device__ inline Real3 make_Real3(Real2 a, Real s)
{
    return make_Real3(a.x, a.y, s);
}
__host__ __device__ inline Real3 make_Real3(Real4 a)
{
    return make_Real3(a.x, a.y, a.z);
}
__host__ __device__ inline Real3 make_Real3(int3 a)
{
    return make_Real3(Real(a.x), Real(a.y), Real(a.z));
}
__host__ __device__ inline Real3 make_Real3(uint3 a)
{
    return make_Real3(Real(a.x), Real(a.y), Real(a.z));
}

__host__ __device__ inline int3 make_int3(Real3 a)
{
    return make_int3(int(a.x), int(a.y), int(a.z));
}

__host__ __device__ inline Real4 make_Real4(Real a, Real b, Real c, Real d) ///
{
	Real4 e;
	e.x = a;
	e.y = b;
	e.z = c;
	e.w = d;
	return e;
}
__host__ __device__ inline Real4 make_Real4(Real s)
{
    return make_Real4(s, s, s, s);
}
__host__ __device__ inline Real4 make_Real4(Real3 a)
{
    return make_Real4(a.x, a.y, a.z, 0.0);
}
__host__ __device__ inline Real4 make_Real4(Real3 a, Real w)
{
    return make_Real4(a.x, a.y, a.z, w);
}
__host__ __device__ inline Real4 make_Real4(int4 a)
{
    return make_Real4(Real(a.x), Real(a.y), Real(a.z), Real(a.w));
}
__host__ __device__ inline Real4 make_Real4(uint4 a)
{
    return make_Real4(Real(a.x), Real(a.y), Real(a.z), Real(a.w));
}

__host__ __device__ inline int4 make_int4(Real4 a)
{
    return make_int4(int(a.x), int(a.y), int(a.z), int(a.w));
}

__host__ __device__ inline Real2 operator-(Real2 &a)
{
    return make_Real2(-a.x, -a.y);
}

__host__ __device__ inline Real3 operator-(Real3 &a)
{
    return make_Real3(-a.x, -a.y, -a.z);
}

__host__ __device__ inline Real4 operator-(Real4 &a)
{
    return make_Real4(-a.x, -a.y, -a.z, -a.w);
}

__host__ __device__ inline Real2 operator+(Real2 a, Real2 b)
{
    return make_Real2(a.x + b.x, a.y + b.y);
}
__host__ __device__ inline void operator+=(Real2 &a, Real2 b)
{
    a.x += b.x; a.y += b.y;
}
__host__ __device__ inline Real2 operator+(Real2 a, Real b)
{
    return make_Real2(a.x + b, a.y + b);
}
__host__ __device__ inline Real2 operator+(Real b, Real2 a)
{
    return make_Real2(a.x + b, a.y + b);
}
__host__ __device__ inline void operator+=(Real2 &a, Real b)
{
    a.x += b; a.y += b;
}

__host__ __device__ inline Real3 operator+(Real3 a, Real3 b)
{
    return make_Real3(a.x + b.x, a.y + b.y, a.z + b.z);
}
__host__ __device__ inline void operator+=(Real3 &a, Real3 b)
{
    a.x += b.x; a.y += b.y; a.z += b.z;
}
__host__ __device__ inline Real3 operator+(Real3 a, Real b)
{
    return make_Real3(a.x + b, a.y + b, a.z + b);
}
__host__ __device__ inline void operator+=(Real3 &a, Real b)
{
    a.x += b; a.y += b; a.z += b;
}

__host__ __device__ inline Real3 operator+(Real b, Real3 a)
{
    return make_Real3(a.x + b, a.y + b, a.z + b);
}

__host__ __device__ inline Real4 operator+(Real4 a, Real4 b)
{
    return make_Real4(a.x + b.x, a.y + b.y, a.z + b.z,  a.w + b.w);
}
__host__ __device__ inline void operator+=(Real4 &a, Real4 b)
{
    a.x += b.x; a.y += b.y; a.z += b.z; a.w += b.w;
}
__host__ __device__ inline Real4 operator+(Real4 a, Real b)
{
    return make_Real4(a.x + b, a.y + b, a.z + b, a.w + b);
}
__host__ __device__ inline Real4 operator+(Real b, Real4 a)
{
    return make_Real4(a.x + b, a.y + b, a.z + b, a.w + b);
}
__host__ __device__ inline void operator+=(Real4 &a, Real b)
{
    a.x += b; a.y += b; a.z += b; a.w += b;
}

__host__ __device__ inline Real2 operator-(Real2 a, Real2 b)
{
    return make_Real2(a.x - b.x, a.y - b.y);
}
__host__ __device__ inline void operator-=(Real2 &a, Real2 b)
{
    a.x -= b.x; a.y -= b.y;
}
__host__ __device__ inline Real2 operator-(Real2 a, Real b)
{
    return make_Real2(a.x - b, a.y - b);
}
__host__ __device__ inline Real2 operator-(Real b, Real2 a)
{
    return make_Real2(b - a.x, b - a.y);
}
__host__ __device__ inline void operator-=(Real2 &a, Real b)
{
    a.x -= b; a.y -= b;
}

__host__ __device__ inline Real3 operator-(Real3 a, Real3 b)
{
    return make_Real3(a.x - b.x, a.y - b.y, a.z - b.z);
}
__host__ __device__ inline void operator-=(Real3 &a, Real3 b)
{
    a.x -= b.x; a.y -= b.y; a.z -= b.z;
}
__host__ __device__ inline Real3 operator-(Real3 a, Real b)
{
    return make_Real3(a.x - b, a.y - b, a.z - b);
}
__host__ __device__ inline Real3 operator-(Real b, Real3 a)
{
    return make_Real3(b - a.x, b - a.y, b - a.z);
}
__host__ __device__ inline void operator-=(Real3 &a, Real b)
{
    a.x -= b; a.y -= b; a.z -= b;
}

__host__ __device__ inline Real4 operator-(Real4 a, Real4 b)
{
    return make_Real4(a.x - b.x, a.y - b.y, a.z - b.z,  a.w - b.w);
}
__host__ __device__ inline void operator-=(Real4 &a, Real4 b)
{
    a.x -= b.x; a.y -= b.y; a.z -= b.z; a.w -= b.w;
}
__host__ __device__ inline Real4 operator-(Real4 a, Real b)
{
    return make_Real4(a.x - b, a.y - b, a.z - b,  a.w - b);
}
__host__ __device__ inline void operator-=(Real4 &a, Real b)
{
    a.x -= b; a.y -= b; a.z -= b; a.w -= b;
}

__host__ __device__ inline Real2 operator*(Real2 a, Real2 b)
{
    return make_Real2(a.x * b.x, a.y * b.y);
}
__host__ __device__ inline void operator*=(Real2 &a, Real2 b)
{
    a.x *= b.x; a.y *= b.y;
}
__host__ __device__ inline Real2 operator*(Real2 a, Real b)
{
    return make_Real2(a.x * b, a.y * b);
}
__host__ __device__ inline Real2 operator*(Real b, Real2 a)
{
    return make_Real2(b * a.x, b * a.y);
}
__host__ __device__ inline void operator*=(Real2 &a, Real b)
{
    a.x *= b; a.y *= b;
}

__host__ __device__ inline Real3 operator*(Real3 a, Real3 b)
{
    return make_Real3(a.x * b.x, a.y * b.y, a.z * b.z);
}
__host__ __device__ inline void operator*=(Real3 &a, Real3 b)
{
    a.x *= b.x; a.y *= b.y; a.z *= b.z;
}
__host__ __device__ inline Real3 operator*(Real3 a, Real b)
{
    return make_Real3(a.x * b, a.y * b, a.z * b);
}
__host__ __device__ inline Real3 operator*(Real b, Real3 a)
{
    return make_Real3(b * a.x, b * a.y, b * a.z);
}
__host__ __device__ inline void operator*=(Real3 &a, Real b)
{
    a.x *= b; a.y *= b; a.z *= b;
}

__host__ __device__ inline Real4 operator*(Real4 a, Real4 b)
{
    return make_Real4(a.x * b.x, a.y * b.y, a.z * b.z,  a.w * b.w);
}
__host__ __device__ inline void operator*=(Real4 &a, Real4 b)
{
    a.x *= b.x; a.y *= b.y; a.z *= b.z; a.w *= b.w;
}
__host__ __device__ inline Real4 operator*(Real4 a, Real b)
{
    return make_Real4(a.x * b, a.y * b, a.z * b,  a.w * b);
}
__host__ __device__ inline Real4 operator*(Real b, Real4 a)
{
    return make_Real4(b * a.x, b * a.y, b * a.z, b * a.w);
}
__host__ __device__ inline void operator*=(Real4 &a, Real b)
{
    a.x *= b; a.y *= b; a.z *= b; a.w *= b;
}

__host__ __device__ inline Real2 operator/(Real2 a, Real2 b)
{
    return make_Real2(a.x / b.x, a.y / b.y);
}
__host__ __device__ inline void operator/=(Real2 &a, Real2 b)
{
    a.x /= b.x; a.y /= b.y;
}
__host__ __device__ inline Real2 operator/(Real2 a, Real b)
{
    return make_Real2(a.x / b, a.y / b);
}
__host__ __device__ inline void operator/=(Real2 &a, Real b)
{
    a.x /= b; a.y /= b;
}
__host__ __device__ inline Real2 operator/(Real b, Real2 a)
{
    return make_Real2(b / a.x, b / a.y);
}

__host__ __device__ inline Real3 operator/(Real3 a, Real3 b)
{
    return make_Real3(a.x / b.x, a.y / b.y, a.z / b.z);
}
__host__ __device__ inline void operator/=(Real3 &a, Real3 b)
{
    a.x /= b.x; a.y /= b.y; a.z /= b.z;
}
__host__ __device__ inline Real3 operator/(Real3 a, Real b)
{
    return make_Real3(a.x / b, a.y / b, a.z / b);
}
__host__ __device__ inline void operator/=(Real3 &a, Real b)
{
    a.x /= b; a.y /= b; a.z /= b;
}
__host__ __device__ inline Real3 operator/(Real b, Real3 a)
{
    return make_Real3(b / a.x, b / a.y, b / a.z);
}

__host__ __device__ inline Real4 operator/(Real4 a, Real4 b)
{
    return make_Real4(a.x / b.x, a.y / b.y, a.z / b.z,  a.w / b.w);
}
__host__ __device__ inline void operator/=(Real4 &a, Real4 b)
{
    a.x /= b.x; a.y /= b.y; a.z /= b.z; a.w /= b.w;
}
__host__ __device__ inline Real4 operator/(Real4 a, Real b)
{
    return make_Real4(a.x / b, a.y / b, a.z / b,  a.w / b);
}
__host__ __device__ inline void operator/=(Real4 &a, Real b)
{
    a.x /= b; a.y /= b; a.z /= b; a.w /= b;
}
__host__ __device__ inline Real4 operator/(Real b, Real4 a){
    return make_Real4(b / a.x, b / a.y, b / a.z, b / a.w);
}

__host__ __device__ inline  Real2 rminr(Real2 a, Real2 b)
{
	return make_Real2(rminr(a.x,b.x), rminr(a.y,b.y));
}
__host__ __device__ inline Real3 rminr(Real3 a, Real3 b)
{
	return make_Real3(rminr(a.x,b.x), rminr(a.y,b.y), rminr(a.z,b.z));
}
__host__ __device__ inline  Real4 rminr(Real4 a, Real4 b)
{
	return make_Real4(rminr(a.x,b.x), rminr(a.y,b.y), rminr(a.z,b.z), rminr(a.w,b.w));
}

__host__ __device__ inline Real2 rmaxr(Real2 a, Real2 b)
{
	return make_Real2(rmaxr(a.x,b.x), rmaxr(a.y,b.y));
}
__host__ __device__ inline Real3 rmaxr(Real3 a, Real3 b)
{
	return make_Real3(rmaxr(a.x,b.x), rmaxr(a.y,b.y), rmaxr(a.z,b.z));
}
__host__ __device__ inline Real4 rmaxr(Real4 a, Real4 b)
{
	return make_Real4(rmaxr(a.x,b.x), rmaxr(a.y,b.y), rmaxr(a.z,b.z), rmaxr(a.w,b.w));
}

#if DOUBLEPRECISION
__host__ __device__ inline Real lerp(Real a, Real b, Real t)
{
    return a + t*(b-a);
}
#endif

__host__ __device__ inline Real2 lerp(Real2 a, Real2 b, Real t)
{
    return a + t*(b-a);
}
__host__ __device__ inline Real3 lerp(Real3 a, Real3 b, Real t)
{
    return a + t*(b-a);
}
__host__ __device__ inline Real4 lerp(Real4 a, Real4 b, Real t)
{
    return a + t*(b-a);
}

#if DOUBLEPRECISION
__host__ __device__ inline Real clamp(Real f, Real a, Real b)
{
    return rmaxr(a, rminr(f, b));
}
#endif
__host__ __device__ inline Real2 clamp(Real2 v, Real a, Real b)
{
    return make_Real2(clamp(v.x, a, b), clamp(v.y, a, b));
}
__host__ __device__ inline Real2 clamp(Real2 v, Real2 a, Real2 b)
{
    return make_Real2(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y));
}
__host__ __device__ inline Real3 clamp(Real3 v, Real a, Real b)
{
    return make_Real3(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b));
}
__host__ __device__ inline Real3 clamp(Real3 v, Real3 a, Real3 b)
{
    return make_Real3(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z));
}
__host__ __device__ inline Real4 clamp(Real4 v, Real a, Real b)
{
    return make_Real4(clamp(v.x, a, b), clamp(v.y, a, b), clamp(v.z, a, b), clamp(v.w, a, b));
}
__host__ __device__ inline Real4 clamp(Real4 v, Real4 a, Real4 b)
{
    return make_Real4(clamp(v.x, a.x, b.x), clamp(v.y, a.y, b.y), clamp(v.z, a.z, b.z), clamp(v.w, a.w, b.w));
}

__host__ __device__ inline Real dot(Real2 a, Real2 b)
{ 
    return a.x * b.x + a.y * b.y;
}
__host__ __device__ inline Real dot(Real3 a, Real3 b)
{ 
    return a.x * b.x + a.y * b.y + a.z * b.z;
}
__host__ __device__ inline Real dot(Real4 a, Real4 b)
{ 
    return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
}

__host__ __device__ inline Real length(Real2 v)
{
    return sqrt(dot(v, v));
}
__host__ __device__ inline Real length(Real3 v)
{
    return sqrt(dot(v, v));
}
__host__ __device__ inline Real length(Real4 v)
{
    return sqrt(dot(v, v));
}

__host__ __device__ inline Real2 normalize(Real2 v)
{
    Real invLen = rsqrtr(dot(v, v));
    return v * invLen;
}
__host__ __device__ inline Real3 normalize(Real3 v)
{
    Real invLen = rsqrtr(dot(v, v));
    return v * invLen;
}
__host__ __device__ inline Real4 normalize(Real4 v)
{
    Real invLen = rsqrtr(dot(v, v));
    return v * invLen;
}

__host__ __device__ inline Real2 floor(Real2 v)
{
    return make_Real2(floor(v.x), floor(v.y));
}
__host__ __device__ inline Real3 floor(Real3 v)
{
    return make_Real3(floor(v.x), floor(v.y), floor(v.z));
}
__host__ __device__ inline Real4 floor(Real4 v)
{
    return make_Real4(floor(v.x), floor(v.y), floor(v.z), floor(v.w));
}

__host__ __device__ inline Real fracr(Real v)
{
    return v - floor(v);
}
__host__ __device__ inline Real2 fracr(Real2 v)
{
    return make_Real2(fracr(v.x), fracr(v.y));
}
__host__ __device__ inline Real3 fracr(Real3 v)
{
    return make_Real3(fracr(v.x), fracr(v.y), fracr(v.z));
}
__host__ __device__ inline Real4 fracr(Real4 v)
{
    return make_Real4(fracr(v.x), fracr(v.y), fracr(v.z), fracr(v.w));
}

__host__ __device__ inline Real rmodr(Real a, Real b)
{
	return fmod(a,b);
}
__host__ __device__ inline Real2 rmodr(Real2 a, Real2 b)
{
    return make_Real2(rmodr(a.x, b.x), rmodr(a.y, b.y));
}
__host__ __device__ inline Real3 rmodr(Real3 a, Real3 b)
{
    return make_Real3(rmodr(a.x, b.x), rmodr(a.y, b.y), rmodr(a.z, b.z));
}
__host__ __device__ inline Real4 rmodr(Real4 a, Real4 b)
{
    return make_Real4(rmodr(a.x, b.x), rmodr(a.y, b.y), rmodr(a.z, b.z), rmodr(a.w, b.w));
}

__host__ __device__ inline Real2 abs(Real2 v)
{
	return make_Real2(abs(v.x), abs(v.y));
}
__host__ __device__ inline Real3 abs(Real3 v)
{
	return make_Real3(abs(v.x), abs(v.y), abs(v.z));
}
__host__ __device__ inline Real4 abs(Real4 v)
{
	return make_Real4(abs(v.x), abs(v.y), abs(v.z), abs(v.w));
}

__host__ __device__ inline Real3 reflect(Real3 i, Real3 n)
{
	return i - 2.0 * n * dot(n,i);
}

__host__ __device__ inline Real3 cross(Real3 a, Real3 b)
{ 
    return make_Real3(a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x);
}

#if DOUBLEPRECISION
__host__ __device__ inline Real smoothstep(Real a, Real b, Real x)
{
	Real y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(3.0 - (2.0*y)));
}
#endif
__host__ __device__ inline Real2 smoothstep(Real2 a, Real2 b, Real2 x)
{
	Real2 y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(make_Real2(3.0) - (make_Real2(2.0)*y)));
}
__host__ __device__ inline Real3 smoothstep(Real3 a, Real3 b, Real3 x)
{
	Real3 y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(make_Real3(3.0) - (make_Real3(2.0)*y)));
}
__host__ __device__ inline Real4 smoothstep(Real4 a, Real4 b, Real4 x)
{
	Real4 y = clamp((x - a) / (b - a), 0.0, 1.0);
	return (y*y*(make_Real4(3.0) - (make_Real4(2.0)*y)));
}
//**** some other useful operators
__host__ __device__ inline bool operator== (const int2 & a , const int2 & b){
	return (a.x==b.x&&a.y==b.y);
}

#endif
